// Created by Brennan Douglas 02/06/2017

Classes:
	Tool:
		Members:
			Private:
				int strength
				char type
			Public:
				Tool()
					// Default constructor, sets strength to 1
				Tool(int strength)
					// Strength constructor, sets strength to strength
				virtual ~Tool()
					// Virtual deconstructor
				void setStrength(int strength)
				virtual int fight(Tool* tool) = 0
					// In the requirments it says this should be a bool,
					// but it also says another method of conveing losing
					// or winning is acceptable.  So here returning of
					// +1 will convey a win, 0 will convey a tie, and -1
					// will convey a lose.
		SubClasses:
			Rock:
				Members:
					Public:
						Rock()
							// Default constructor, calls Tool()
						Rock(int strength)
							// Constructor, calls Tool(strength)
						int fight(Tool* tool)
							// Override the abstract function for rock.
							// Rock's strength should be doubled when fighting
							// scissors, or halved when fighting paper.
			Paper:
				Public:
						Paper()
							// Default constructor, calls Tool()
						Paper(int strength)
							// Constructor, calls Tool(strength)
						int fight(Tool* tool)
							// Override the abstract function for paper.
							// PAper's strength should be doubled when fighting
							// rock, or halved when fighting scissors.
			Scissors:
				Public:
						Scissors()
							// Default constructor, calls Tool()
						Scissors(int strength)
							// Constructor, calls Tool(strength)
						int fight(Tool* tool)
							// Override the abstract function for scissors.
							// Scissors's strength should be doubled when fighting
							// paper, or halved when fighting rock.
	RPSGame:
		Members:
			Private:
				int human_wins
				int computer_wins
				int ties
				Tool* human
				Tool* computer
			Public:
				void setTool(char player, Tool* tool)
					// The player variable will contain a 'h' for human or a
					// 'c' for computer.  Then the current corresponding tool
					// will need to be deleted from memory and the new tool
					// given to the corresponding variable.
				char playGame()
					// This function will enact a game between the current human
					// and computer tools.  It will increment the correct counter
					// internally then return 'h' for human win, 'c' for computer
					// win, or 't' for tie.
				Tool* createComputerTool()
					// This will be called to create a random or calculated computer
					// tool before a new round is played.  This can either be done
					// in the main function then set using the setTool method, or
					// can be called at the beginning of the playGame method.